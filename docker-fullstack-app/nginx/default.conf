upstream frontend { # 프론트엔드 서버
# frontend(docker-compose에서 작성한 이름)가 3000번 포트로 요청을 보내고 있다.
    server frontend:3000;
}

upstream websocket { # 웹소켓 서버
    server websocket:5001;
}

upstream backend { # 백엔드 서버
    server backend:5000;
}

server {
    # nginx 서버는 80번 포트를 바라보고 있다가 해당 포트로 어떠한 요청이 오면 처리한다.
    listen 80;

    # '/'라는 경로로 오는 요청들에 대한 처리
    # proxy_pass는 reverse proxy에 사용되는 지시어이다.
    # 현재 서버에 '/'로 시작하는 경로로 접근하면, 'http://frontend'로 돌려준다는 의미이다.
    # 그러면 사용자는 실제로는 'http://frontend'에 접근하지 않았지만, 접근한 것과 동일한 효과가 발생한다.
    # 참고로 location 지시어에는 우선 순위가 있는데, '/' 하나만 있는 경로는 가장 우선순위가 낮다. 따라서 아래의 '/api'부터 탐색을 하게 된다.
    location / {
        # 도커 환경이 아니면 proxy_pass 뒤에 실제 ip주소를 적어줘야 한다.
        proxy_pass http://frontend;
    }

    location /api {
        proxy_pass http://backend;
    }

    location /socket.io {
        proxy_pass http://websocket;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header Origin "";
    }
    
    # cra에서 기본 포트를 3000포트로 설정해서 ws와 충돌하기 때문에 아래와 같이 설정해야한다.
    location /ws {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header Origin "";
    }
}
